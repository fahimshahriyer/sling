(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{"./docs/styling.mdx":function(e,n,t){"use strict";t.r(n);var a=t("./node_modules/react/index.js"),o=t.n(a),r=t("./node_modules/@mdx-js/tag/dist/index.js");function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}n.default=function(e){var n=e.components;s(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:n},o.a.createElement(r.MDXTag,{name:"h1",components:n,props:{id:"styling"}},"Styling"),o.a.createElement(r.MDXTag,{name:"p",components:n},"We have integrated ",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"http://cssinjs.org"}},"JSS")," as our styling solution. JSS is a more powerful abstraction over CSS. It uses\nJavaScript as a language to describe styles in a declarative and maintainable way. It is a high performance\nJS to CSS compiler which works at runtime and server-side. This core library is low level and framework agnostic."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Also ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Sling")," is built on top of ",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://material-ui.com/"}},"Material UI")," framework. All Material UI\ncomponents is styled using ",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"http://cssinjs.org"}},"JSS"),"."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Here is a typical component boilerplate for you to get started with styling your components using ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"JSS")),o.a.createElement(r.MDXTag,{name:"blockquote",components:n},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"blockquote"},"Note: By using this pattern you get access to all the theme variables. This way the design of your app is\ncoherent with rest of the app.")),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js"}},'import React, { Component } from "react";\nimport PropTypes from "prop-types";\nimport { withStyles } from "@material-ui/core/styles";\n\nconst styles = theme => ({\n  root: {\n    display: flex;\n  }\n});\n\nclass BeautifulComponent extends Component {\n  render() {\n    const { classes } = this.props;\n    return (\n      <div className={classes.root}>\n        // Your code here\n      </div>\n    );\n  }\n}\nBeautifulComponent.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(BeautifulComponent);\n')),o.a.createElement(r.MDXTag,{name:"p",components:n},"Plese, go take a look at the ",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"http://cssinjs.org"}},"JSS"),"  documentation to know in depth how to style your app using this library.\nIt is very easy to dive into. Also just by looking at some of our components will give you a very good idea.\nIf you know CSS and have familiarity with CSS in JS styling solution you will feel right at home."))}}}]);