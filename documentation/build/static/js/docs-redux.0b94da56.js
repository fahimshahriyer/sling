(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{"./docs/Redux.mdx":function(e,n,t){"use strict";t.r(n);var o=t("./node_modules/react/index.js"),a=t.n(o),r=t("./node_modules/@mdx-js/tag/dist/index.js");function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}n.default=function(e){var n=e.components;s(e,["components"]);return a.a.createElement(r.MDXTag,{name:"wrapper",components:n},a.a.createElement(r.MDXTag,{name:"h1",components:n,props:{id:"redux"}},"Redux"),a.a.createElement(r.MDXTag,{name:"p",components:n},a.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://redux.js.org/"}},"Redux")," is a very popular predictable state container for JavaScript apps. We have integrated Redux together with\nredux saga in our app to consistently manage state and middleware for our app. All the redux and redux-saga\nfiles goes into ",a.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"sling/src/redux/")," directory. You are free to organize your redux related actions, reducers and\nmiddleware files as you prefer."),a.a.createElement(r.MDXTag,{name:"p",components:n},"Here is a boilerplate component to get you started with creating a Redux connected component:"),a.a.createElement(r.MDXTag,{name:"pre",components:n},a.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js"}},'import React, { Component } from "react";\nimport PropTypes from "prop-types";\nimport { withStyles } from "@material-ui/core/styles";\nimport { connect } from "react-redux";\n\nconst styles = theme => ({});\nclass ReduxComponent extends Component {\n  render() {\n    const { classes } = this.props;\n    return <div />;\n  }\n}\nReduxComponent.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nconst mapStateToProps = state => ({});\n\nconst mapDispatchToProps = {};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withStyles(styles)(ReduxComponent));\n')),a.a.createElement(r.MDXTag,{name:"p",components:n},"Browse Redux documentation to learn more about state management using Redux."))}}}]);